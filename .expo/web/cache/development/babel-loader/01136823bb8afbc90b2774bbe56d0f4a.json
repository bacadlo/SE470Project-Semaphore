{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ButtonBasics = function (_Component) {\n  _inherits(ButtonBasics, _Component);\n\n  var _super = _createSuper(ButtonBasics);\n\n  function ButtonBasics() {\n    _classCallCheck(this, ButtonBasics);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ButtonBasics, [{\n    key: \"fantasticButton\",\n    value: function fantasticButton() {\n      Alert.alert(\"Your mood is:\", \"Fantastic\", [{\n        text: \"OK\",\n        onPress: function onPress() {\n          return console.log(\"OK Pressed\");\n        }\n      }]);\n    }\n  }, {\n    key: \"niceButton\",\n    value: function niceButton() {\n      Alert.alert(\"Your mood is:\", \"nice\", [{\n        text: \"OK\",\n        onPress: function onPress() {\n          return console.log(\"OK Pressed\");\n        }\n      }]);\n    }\n  }, {\n    key: \"sorryButton\",\n    value: function sorryButton() {\n      Alert.alert(\"Your mood is:\", \"Sorry\", [{\n        text: \"OK\",\n        onPress: function onPress() {\n          return console.log(\"OK Pressed\");\n        }\n      }]);\n    }\n  }, {\n    key: \"forgiveButton\",\n    value: function forgiveButton() {\n      Alert.alert(\"Alert!\", \"Forgive us.\", [{\n        text: \"OK\",\n        onPress: function onPress() {\n          return console.log(\"OK Pressed\");\n        }\n      }]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(Button, {\n            onPress: this.fantasticButton,\n            title: \"Fantastic\",\n            color: \"green\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(Button, {\n            onPress: this.niceButton,\n            title: \"Nice\",\n            color: \"yellow\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(Button, {\n            onPress: this.sorryButton,\n            title: \"Sorry\",\n            color: \"pink\"\n          })\n        }), _jsx(View, {\n          style: styles.buttonContainer,\n          children: _jsx(Button, {\n            onPress: this.forgiveButton,\n            title: \"Forgive us\",\n            color: \"red\"\n          })\n        }), _jsx(StatusBar, {\n          style: \"auto\"\n        })]\n      });\n    }\n  }]);\n\n  return ButtonBasics;\n}(Component);\n\nexport { ButtonBasics as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 4,\n    justifyContent: \"center\"\n  },\n  buttonContainer: {\n    margin: 20\n  }\n});","map":{"version":3,"sources":["E:/Spring 22/SE 350 - Human Computer Interaction/Project 3/SurveyButton/App.js"],"names":["StatusBar","React","Component","ButtonBasics","Alert","alert","text","onPress","console","log","styles","container","buttonContainer","fantasticButton","niceButton","sorryButton","forgiveButton","StyleSheet","create","flex","justifyContent","margin"],"mappings":";;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;;;;;;IAGqBC,Y;;;;;;;;;;;;;WACjB,2BAAiB;AACbC,MAAAA,KAAK,CAACC,KAAN,CACE,eADF,EAEE,WAFF,EAGF,CACE;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE;AAAA,iBAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAAA;AAAvB,OADF,CAHE;AAOH;;;WAED,sBAAY;AACRL,MAAAA,KAAK,CAACC,KAAN,CACE,eADF,EAEE,MAFF,EAGF,CACE;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE;AAAA,iBAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAAA;AAAvB,OADF,CAHE;AAOH;;;WAED,uBAAa;AACTL,MAAAA,KAAK,CAACC,KAAN,CACE,eADF,EAEE,OAFF,EAGF,CACE;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE;AAAA,iBAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAAA;AAAvB,OADF,CAHE;AAOH;;;WAED,yBAAe;AACXL,MAAAA,KAAK,CAACC,KAAN,CACE,QADF,EAEE,aAFF,EAGF,CACE;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,OAAO,EAAE;AAAA,iBAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAAA;AAAvB,OADF,CAHE;AAOH;;;WAED,kBAAQ;AACJ,aACI,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,mBACI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAED,MAAM,CAACE,eAApB;AAAA,oBACI,KAAC,MAAD;AACA,YAAA,OAAO,EAAE,KAAKC,eADd;AAEA,YAAA,KAAK,EAAG,WAFR;AAGA,YAAA,KAAK,EAAE;AAHP;AADJ,UADJ,EAQI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEH,MAAM,CAACE,eAApB;AAAA,oBACI,KAAC,MAAD;AACA,YAAA,OAAO,EAAE,KAAKE,UADd;AAEA,YAAA,KAAK,EAAG,MAFR;AAGA,YAAA,KAAK,EAAG;AAHR;AADJ,UARJ,EAeI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEJ,MAAM,CAACE,eAApB;AAAA,oBACI,KAAC,MAAD;AACA,YAAA,OAAO,EAAE,KAAKG,WADd;AAEA,YAAA,KAAK,EAAG,OAFR;AAGA,YAAA,KAAK,EAAE;AAHP;AADJ,UAfJ,EAsBI,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEL,MAAM,CAACE,eAApB;AAAA,oBACI,KAAC,MAAD;AACA,YAAA,OAAO,EAAE,KAAKI,aADd;AAEA,YAAA,KAAK,EAAG,YAFR;AAGA,YAAA,KAAK,EAAE;AAHP;AADJ,UAtBJ,EA8BI,KAAC,SAAD;AAAW,UAAA,KAAK,EAAC;AAAjB,UA9BJ;AAAA,QADJ;AAmCH;;;;EA7EqCd,S;;SAArBC,Y;AA+ErB,IAAMO,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAC;AACNQ,IAAAA,IAAI,EAAC,CADC;AAENC,IAAAA,cAAc,EAAE;AAFV,GADmB;AAK7BR,EAAAA,eAAe,EAAC;AACZS,IAAAA,MAAM,EAAC;AADK;AALa,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {Component} from 'react';\nimport { StyleSheet, Text, View, Button, Alert } from 'react-native';\n\nexport default class ButtonBasics extends Component {\n    fantasticButton(){\n        Alert.alert(\n          \"Your mood is:\",\n          \"Fantastic\",\n      [        \n        { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\n      ]\n    )\n    }\n\n    niceButton(){\n        Alert.alert(\n          \"Your mood is:\",\n          \"nice\",\n      [\n        { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\n      ]\n    )\n    }\n\n    sorryButton(){\n        Alert.alert(\n          \"Your mood is:\",\n          \"Sorry\",\n      [\n        { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\n      ]\n    )\n    }\n\n    forgiveButton(){\n        Alert.alert(\n          \"Alert!\",\n          \"Forgive us.\",\n      [\n        { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\n      ]\n    )\n    }\n\n    render(){\n        return(\n            <View style={styles.container}>\n                <View style={styles.buttonContainer}>\n                    <Button\n                    onPress={this.fantasticButton}\n                    title = \"Fantastic\"\n                    color= \"green\"                                 \n                    />\n                    </View>  \n                <View style={styles.buttonContainer}>\n                    <Button\n                    onPress={this.niceButton}\n                    title = \"Nice\"\n                    color = \"yellow\"              \n                    />\n                    </View>                    \n                <View style={styles.buttonContainer}>\n                    <Button\n                    onPress={this.sorryButton}\n                    title = \"Sorry\"\n                    color= \"pink\"                    \n                    />\n                    </View> \n                <View style={styles.buttonContainer}>\n                    <Button\n                    onPress={this.forgiveButton}\n                    title = \"Forgive us\"\n                    color= \"red\"\n                    \n                    />\n                    </View>\n                <StatusBar style=\"auto\" />   \n\n            </View>\n        );\n    }\n}\nconst styles = StyleSheet.create({\n    container:{\n        flex:4,\n        justifyContent: \"center\",\n    },\n    buttonContainer:{\n        margin:20\n    }   \n    \n})"]},"metadata":{},"sourceType":"module"}